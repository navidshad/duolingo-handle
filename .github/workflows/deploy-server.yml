# Steps to deploy the app:
# - Build the Docker image and push it to Docker Hub
# - Deploy the Docker image to EC2 by SSH

name: Deploy Server App

on:
  # push:
  #   branches: ["main"]
  # pull_request:
  #   branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  IMAGE_TAG: SERVER-${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build the Docker image
      - name: Build the Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/duolingo-handle:${{ env.IMAGE_TAG }} -f server.Dockerfile .

      # Push the Docker image to Docker Hub
      - name: Push the Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/duolingo-handle:${{ env.IMAGE_TAG }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Read Docker Compose File
        id: read-compose
        run: |
          COMPOSE_CONTENT=$(cat ./docker-compose.json)
          echo "::set-output name=compose-content::$COMPOSE_CONTENT"

      # Deploy the Docker image to EC2 by SSH
      - name: Deploy the Docker image to EC2 by SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Create docker compose File and print it
            echo "${{ steps.read-compose.outputs.compose-content }}" > docker-compose.json
            # Remove the previous version of the app, if exists
            docker-compose down
            # Remove all images starts with "SERVER-"
            docker rmi $(docker images -q --filter "reference=SERVER-*") &> /dev/null
            # Set env variables
            export SERVER_IMAGE_NAME=${{ env.IMAGE_TAG }}
            export SERVER_ADMIN_EMAIL=${{ env.SERVER_ADMIN_EMAIL }}
            export SERVER_ADMIN_PASSWORD=${{ env.SERVER_ADMIN_PASSWORD }}
            export GOOGLE_CLOUD_API_KEY=${{ secrets.GOOGLE_CLOUD_API_KEY }}
            export OPENAI_KEY=${{ secrets.OPENAI_KEY }}
            # Up the app
            docker-compose -f docker-compose.json up -d
