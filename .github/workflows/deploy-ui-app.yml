# Steps to deploy the app:
# - Build the Docker image and push it to Docker Hub
# - Deploy the Docker image to EC2 by SSH

name: Deploy UI App

on:
  # push:
  #   branches: ["main"]
  # pull_request:
  #   branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  IMAGE_TAG: UI-${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build the Docker image
      - name: Build the Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/duolingo-handle:${{ env.IMAGE_TAG }} -f ui-app.Dockerfile .

      # Push the Docker image to Docker Hub
      - name: Push the Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/duolingo-handle:${{ env.IMAGE_TAG }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Deploy the Docker image to EC2 by SSH
      - name: Deploy the Docker image to EC2 by SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Login to Docker Hub
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p '${{ secrets.DOCKER_PASSWORD }}' && docker pull ${{ secrets.DOCKER_USERNAME }}/duolingo-handle:${{ env.IMAGE_TAG }}
            
            # Set the environment variables for the Docker image
            export LOCAL_UI_CONTAINER=duolingo-handle-ui
            export LOCAL_UI_IMAGE=current-ui
            
            # Stop and remove the old Docker container
            docker stop $LOCAL_UI_CONTAINER || true
            docker rm --force $LOCAL_UI_CONTAINER || true
            docker rmi --force ${{ secrets.DOCKER_USERNAME }}/duolingo-handle:$LOCAL_UI_IMAGE || true
            
            # Download and tag the Docker image
            docker tag ${{ secrets.DOCKER_USERNAME }}/duolingo-handle:${{ env.IMAGE_TAG }} ${{ secrets.DOCKER_USERNAME }}/duolingo-handle:$LOCAL_UI_IMAGE
            # Remove downloaded Docker image because it's not needed anymore
            docker rmi ${{ secrets.DOCKER_USERNAME }}/duolingo-handle:${{ env.IMAGE_TAG }}

            # Run the Docker container in the background
            docker run -d --restart=always --name $LOCAL_UI_CONTAINER -p 80:80 ${{ secrets.DOCKER_USERNAME }}/duolingo-handle:$LOCAL_UI_IMAGE

